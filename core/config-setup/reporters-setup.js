const SpecReporter = require('jasmine-spec-reporter').SpecReporter;
const testRailIntegration = require('../testrail-integration/testrail-integration');
const configSetup = require('./default-config-setup');
const wait = require("wait-promise");
const autoGeneratedFolderName = "auto-generated";
var commonConfigSetup = {
    onPrepareSetup() {
        testRailIntegration.testRailParameters(configSetup.params.testrail);
        const origFn = browser.driver.controlFlow().execute;
        browser.driver.controlFlow().execute = function () {
            const args = arguments;
            origFn.call(browser.driver.controlFlow(), function () {
                //increase or reduce time value, its in millisecond
                return protractor.promise.delayed(5);
            })
            return origFn.apply(browser.driver.controlFlow(), args);
        };
        const log4js = require('log4js');
        const dateStamp = new Date().toUTCString().replace(/[^A-Z0-9]+/ig, "-").toLowerCase();
        log4js.configure({
            appenders: {
                multi: {
                    type: 'multiFile',
                    base: autoGeneratedFolderName + '/logs/' + (process.env.BUILD_NUMBER || dateStamp),
                    extension: '.log'
                }
            },
            categories: {
                default: {appenders: ['multi'], level: 'all'}
            }
        });

        browser.getCapabilities().then(function (cap) {
            browser.platform = cap.get('platform');
            browser.browserName = cap.get('browserName');
        });

        require('ts-node').register({
            project: 'e2e/tsconfig.e2e.json'
        });
        jasmine.getEnv().addReporter(new SpecReporter({
            spec: {
                displayStacktrace: false
            }
        }));
    },
    teamcityReporterSetup: function () {
        const jasmineReporters = require('jasmine-reporters');
        jasmine.getEnv().addReporter(new jasmineReporters.TeamCityReporter());
    },
    allureReporterSetup() {
        const AllureReporter = require('jasmine-allure-reporter');
        jasmine.getEnv().addReporter(new AllureReporter({
            resultsDir: autoGeneratedFolderName + '/allure-results'
        }));
        jasmine.getEnv().afterEach(function (done) {
            browser.takeScreenshot().then(function (png) {
                allure.createAttachment('Screenshot', function () {
                    return new Buffer(png, 'base64')
                }, 'image/png')();
                done();
            })
        });
    },
    testRailSetup: function () {
        jasmine.getEnv().addReporter(testRailIntegration.testRailJasmin2Reporter);
    },
    testRailSetupOnCleanUp: function () {
        if (!configSetup.params.testrail.postResult) {
            return;
        }
        // Wait for 2 minutes to post the results
        let promise = wait.before(2 * 60 * 1000).until(function () {
            return testRailIntegration.postedSuites() > 0
                && testRailIntegration.suiteIds().length === testRailIntegration.postedSuites()
                && testRailIntegration.savedMilestoneId() !== 0;
        });
        return promise.then(function () {
            if (configSetup.params.testrail.isUniqueMilestone) {
                return testRailIntegration.updateMilestone();
            }
        });
    },
    configureAllReporters: function () {
        commonConfigSetup.onPrepareSetup();
        commonConfigSetup.teamcityReporterSetup();
        commonConfigSetup.allureReporterSetup();
        commonConfigSetup.testRailSetup();
    }
}

module.exports = commonConfigSetup;